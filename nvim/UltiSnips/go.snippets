snippet got "Go template"
package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
	"strings"
)

var sc = bufio.NewScanner(os.Stdin)
var wr = bufio.NewWriter(os.Stdout)

func solve() {
	$0
}

// http://github.com/KadoBOT (me@ricardoambrogi.com)
func main() {
	defer wr.Flush()
	sc.Split(bufio.ScanWords)

	maxBuffer := 1e9
	byteSliceLen := 4096
	sc.Buffer(make([]byte, byteSliceLen), int(maxBuffer))

	for i := getI(); i > 0; i-- {
		solve()
	}
	out()
}

// !------- HELPERS -------!

func out(x ...interface{}) {
	fmt.Fprintln(wr, x...)
}

func printf(f string, a ...interface{}) {
	fmt.Fprintf(wr, f, a...)
}

func getI() int64 {
	s := getS()
	i := int64(0)

	if s[0] == '-' {
		for _, r := range s[1:] {
			i *= 10
			i -= int64(r - '0')
		}

		return i
	}

	for _, r := range s {
		i *= 10
		i += int64(r - '0')
	}

	return i
}

func getF() float64 {
	sc.Scan()

	b64 := 64
	i, e := strconv.ParseFloat(sc.Text(), b64)

	if e != nil {
		panic(e)
	}

	return i
}

func getInts(N int64) []int64 {
	ret := make([]int64, N)
	for i := range ret {
		ret[i] = getI()
	}

	return ret
}

func getS() string {
	if !sc.Scan() {
		panic(sc.Err())
	}

	return sc.Text()
}

func ceil(n, d int64) int64 {
	return (n + d - 1) / d
}

func nsort(data ...int64) []int64 {
	int64AsIntValues := make([]int, len(data))

	for i, val := range data {
		int64AsIntValues[i] = int(val)
	}

	sort.Ints(int64AsIntValues)

	for i, val := range int64AsIntValues {
		data[i] = int64(val)
	}

	return data
}

func nsum(data ...int64) int64 {
	var res int64
	for _, n := range data {
		res += n
	}

	return res
}

func njoin(s ...int64) string {
	return strings.Trim(fmt.Sprintf("%v", s), "[]")
}

func forEach(n int64, fn func(int64)) {
	for i := int64(0); i < n; i++ {
		fn(i)
	}
}

// min, max, asub, abs.
func max(a, b int64) int64 {
	if a > b {
		return a
	}

	return b
}

func min(a, b int64) int64 {
	if a < b {
		return a
	}

	return b
}

// min for n entry.
func nmin(a ...int64) int64 {
	ret := a[0]
	for _, e := range a {
		ret = min(ret, e)
	}

	return ret
}

// max for n entry.
func nmax(a ...int64) int64 {
	ret := a[0]
	for _, e := range a {
		ret = max(ret, e)
	}

	return ret
}

func asub(a, b int64) int64 {
	if a > b {
		return a - b
	}

	return b - a
}

func abs(a int64) int64 {
	if a >= 0 {
		return a
	}

	return -a
}

func lowerBound(a []int64, x int64) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] >= x
	})

	return idx
}

func upperBound(a []int64, x int64) int {
	idx := sort.Search(len(a), func(i int) bool {
		return a[i] > x
	})

	return idx
}

// !------- FORMULAS -------!
func gcd(a, b int64) int64 {
	for b != 0 {
		t := b
		b = a % b
		a = t
	}

	return a
}

func lcm(a, b int64, integers ...int64) int64 {
	result := a * b / gcd(a, b)

	for i := 0; i < len(integers); i++ {
		result = lcm(result, integers[i])
	}

	return result
}

func sieve(n int64) []int64 {
	integers := make([]bool, n+1)

	start := 2

	for i := int64(start); i < n+1; i++ {
		integers[i] = true
	}

	for p := int64(start); p*p <= n; p++ {
		if integers[p] {
			for i := p * int64(start); i <= n; i += p {
				integers[i] = false
			}
		}
	}

	var primes []int64

	for p := int64(start); p <= n; p++ {
		if integers[p] {
			primes = append(primes, p)
		}
	}

	return primes
}

// !---- HELPERS -----!

type Slice struct {
	s []int64
	i []int
}

func NewSlice(n int64) *Slice {
	s := &Slice{s: getInts(n), i: make([]int, int(n))}

	for i := range s.i {
		s.i[i] = i
	}

	sort.Sort(s)

	return s
}

func (s Slice) Len() int {
	return len(s.s)
}

func (s Slice) Less(i, j int) bool {
	return s.s[i] < s.s[j]
}

func (s Slice) Swap(i, j int) {
	s.s[i], s.s[j] = s.s[j], s.s[i]
	s.i[i], s.i[j] = s.i[j], s.i[i]
}
endsnippet
